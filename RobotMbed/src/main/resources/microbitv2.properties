# robot's default program location, if any (preinstalled)
# attention, please leave out the file extension, this will be automatically added during runtime, 
# see "robot.plugin.fileExtension.binary"
robot.factory.default = firmware/MicroBit
robot.plugin.compiler.resources.dir = RobotMbed/
robot.plugin.fileExtension.source = py
robot.plugin.fileExtension.binary = hex
# set the location to the directory containing arm-none-eabi-g++, if it is not accesable from the PATH (ex. /usr/bin/)
# robot.plugin.compiler.dir = /usr/bin/
# robot specific toolboxes, default program and configuration
robot.program.toolbox.beginner = /microbitV2/program.toolbox.beginner.xml
robot.program.toolbox.expert = /microbitV2/program.toolbox.expert.xml
robot.program.default = /microbitV2/program.default.xml
robot.configuration.toolbox = /microbitV2/configuration.toolbox.xml
robot.configuration.default = /microbitV2/configuration.default.xml
# robot's long name to display
robot.real.name = micro:bit V2
robot.vendor = na
# robot's info for further information
robot.info.en = https://www.microbit.co.uk/
robot.configuration = true
# either new or old-<sensorprefix> with <sensorprefix>="S" for all robots but mbot, which needs "P"
robot.configuration.type = new
# still necessary for backwards compatibility with old configurations
robot.configuration.old.toplevelblock = mbedBrick_microbit-Brick

# flag that compiled programs are send back to the client
robot.connection = autoConnection

robot.helperMethods = classpath:/common.methods.yml

robot.plugin.worker.validate.and.collect = de.fhg.iais.roberta.worker.validate.MicrobitV2ValidatorAndCollectorWorker
robot.plugin.worker.validate.and.collect.sim = de.fhg.iais.roberta.worker.validate.MicrobitV2SimValidatorAndCollectorWorker
robot.plugin.worker.generate = de.fhg.iais.roberta.worker.codegen.MicrobitV2PythonGeneratorWorker
robot.plugin.worker.setup = de.fhg.iais.roberta.worker.CompilerSetupWorker
robot.plugin.worker.compile = de.fhg.iais.roberta.worker.MicrobitV2CompilerWorker
robot.plugin.worker.generatesimulation = de.fhg.iais.roberta.worker.codegen.MicrobitV2StackMachineGeneratorWorker
robot.plugin.worker.resetFirmware = de.fhg.iais.roberta.worker.MbedResetFirmwareWorker

robot.plugin.workflow.showsource = validate.and.collect,generate
robot.plugin.workflow.compile = validate.and.collect,generate,setup,compile
robot.plugin.workflow.run = validate.and.collect,generate,setup,compile
robot.plugin.workflow.getsimulationcode = validate.and.collect.sim,generatesimulation
robot.plugin.workflow.runnative = setup,compile
robot.plugin.workflow.compilenative = setup,compile
robot.plugin.workflow.reset = resetFirmware
