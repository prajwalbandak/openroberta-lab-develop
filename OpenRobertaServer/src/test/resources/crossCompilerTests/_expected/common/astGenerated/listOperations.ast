
Var [result] := FunctionExpr [LengthOfListFunct[value: Var [input]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [LengthOfListFunct[value: Var [input2]]]]


if FunctionExpr [IsListEmptyFunct[value: Var [input]]]
,then
Var [result] := Binary [ADD, Var [result], NumConst[value: 1]]

,else
Var [result] := Binary [ADD, Var [result], NumConst[value: 2]]



if FunctionExpr [IsListEmptyFunct[value: Var [input2]]]
,then
Var [result] := Binary [ADD, Var [result], NumConst[value: 1]]

,else
Var [result] := Binary [ADD, Var [result], NumConst[value: 2]]


StmtTextComment[textComment: 8]

Var [result] := Binary [ADD, Var [result], FunctionExpr [IndexOfFunct[location: FIRST, value: Var [input], find: NumConst[value: 3]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [IndexOfFunct[location: LAST, value: Var [input], find: NumConst[value: 3]]]]

StmtTextComment[textComment: 14]

Var [result] := Binary [ADD, Var [result], FunctionExpr [ListGetIndex [GET, FROM_START, [Var [input], NumConst[value: 1]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [ListGetIndex [GET, FROM_END, [Var [input], NumConst[value: 1]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [ListGetIndex [GET, FIRST, [Var [input]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [ListGetIndex [GET, LAST, [Var [input]]]]]

StmtTextComment[textComment: 24]

Var [result] := Binary [ADD, Var [result], FunctionExpr [ListGetIndex [GET_REMOVE, FROM_START, [Var [input], NumConst[value: 1]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [ListGetIndex [GET_REMOVE, FROM_END, [Var [input], NumConst[value: 1]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [ListGetIndex [GET_REMOVE, FIRST, [Var [input]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [ListGetIndex [GET_REMOVE, LAST, [Var [input]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [LengthOfListFunct[value: Var [input]]]]

StmtTextComment[textComment: 35]
ListSetIndex [INSERT, FROM_START, [Var [input], NumConst[value: 1], NumConst[value: 0]]]
ListSetIndex [INSERT, FROM_END, [Var [input], NumConst[value: 2], NumConst[value: 1]]]
ListSetIndex [INSERT, FIRST, [Var [input], NumConst[value: 0]]]
ListSetIndex [INSERT, LAST, [Var [input], NumConst[value: 4]]]

Var [result] := Binary [ADD, Var [result], FunctionExpr [LengthOfListFunct[value: Var [input]]]]

StmtTextComment[textComment: 40]
ListGetIndex [REMOVE, FROM_START, [Var [input], NumConst[value: 1]]]
ListGetIndex [REMOVE, FROM_END, [Var [input], NumConst[value: 1]]]
ListGetIndex [REMOVE, FIRST, [Var [input]]]
ListGetIndex [REMOVE, LAST, [Var [input]]]

Var [result] := Binary [ADD, Var [result], FunctionExpr [LengthOfListFunct[value: Var [input]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [ListGetIndex [GET, LAST, [Var [input]]]]]

StmtTextComment[textComment: 42]
ListSetIndex [INSERT, FROM_START, [Var [input], NumConst[value: 1], NumConst[value: 0]]]
ListSetIndex [INSERT, FROM_END, [Var [input], NumConst[value: 2], NumConst[value: 1]]]
ListSetIndex [INSERT, FIRST, [Var [input], NumConst[value: 0]]]
ListSetIndex [INSERT, LAST, [Var [input], NumConst[value: 4]]]
ListSetIndex [SET, FROM_START, [Var [input], NumConst[value: 3], NumConst[value: 2]]]
ListSetIndex [SET, FROM_START, [Var [input], NumConst[value: 2], NumConst[value: 1]]]
ListSetIndex [SET, FROM_END, [Var [input], NumConst[value: 4], NumConst[value: 1]]]
ListSetIndex [SET, FIRST, [Var [input], NumConst[value: 1]]]
ListSetIndex [SET, LAST, [Var [input], NumConst[value: 5]]]

Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: Var [input]]]]

StmtTextComment[textComment: 57]

Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: FunctionExpr [GetSubFunct [GET_SUBLIST, [FROM_START, FROM_START], [Var [input], NumConst[value: 1], NumConst[value: 3]]]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: FunctionExpr [GetSubFunct [GET_SUBLIST, [FROM_START, FROM_END], [Var [input], NumConst[value: 1], NumConst[value: 1]]]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: FunctionExpr [GetSubFunct [GET_SUBLIST, [FROM_START, LAST], [Var [input], NumConst[value: 1]]]]]]]

StmtTextComment[textComment: 89]

Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: FunctionExpr [GetSubFunct [GET_SUBLIST, [FROM_END, FROM_START], [Var [input], NumConst[value: 3], NumConst[value: 4]]]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: FunctionExpr [GetSubFunct [GET_SUBLIST, [FROM_END, FROM_END], [Var [input], NumConst[value: 4], NumConst[value: 3]]]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: FunctionExpr [GetSubFunct [GET_SUBLIST, [FROM_END, LAST], [Var [input], NumConst[value: 3]]]]]]]

StmtTextComment[textComment: 120]

Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: FunctionExpr [GetSubFunct [GET_SUBLIST, [FIRST, FROM_START], [Var [input], NumConst[value: 3]]]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: FunctionExpr [GetSubFunct [GET_SUBLIST, [FIRST, FROM_END], [Var [input], NumConst[value: 3]]]]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: SUM, list: FunctionExpr [GetSubFunct [GET_SUBLIST, [FIRST, LAST], [Var [input]]]]]]]

StmtTextComment[textComment: 148]

Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: MIN, list: Var [input]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: MAX, list: Var [input]]]]

StmtTextComment[textComment: 154]

Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: AVERAGE, list: Var [input]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: MEDIAN, list: Var [input]]]]


Var [result] := Binary [ADD, Var [result], FunctionExpr [MathOnListFunct[functName: STD_DEV, list: Var [input]]]]

StmtTextComment[textComment: 161.414... ]
StmtTextComment[textComment: 161.414 - sim, 161.5 - board, OK]
