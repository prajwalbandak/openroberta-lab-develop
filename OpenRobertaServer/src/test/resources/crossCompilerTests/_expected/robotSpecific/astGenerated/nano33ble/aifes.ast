
(repeat [FOREVER_ARDU, BoolConst[value: true]]
Var [success] := BoolConst[value: true]

AktionStmt [SerialWriteAction[value: StringConst[value: START]]]NeuralNetworkInitRawData []NeuralNetworkAddRawData[rawData: NumConst[value: 0]]NeuralNetworkAddRawData[rawData: NumConst[value: 0]]NeuralNetworkAddTrainingsData[classNumber: NumConst[value: 0]]NeuralNetworkAddRawData[rawData: NumConst[value: 0]]NeuralNetworkAddRawData[rawData: NumConst[value: 1]]NeuralNetworkAddTrainingsData[classNumber: NumConst[value: 1]]NeuralNetworkAddRawData[rawData: NumConst[value: 1]]NeuralNetworkAddRawData[rawData: NumConst[value: 0]]NeuralNetworkAddTrainingsData[classNumber: NumConst[value: 1]]NeuralNetworkAddRawData[rawData: NumConst[value: 1]]NeuralNetworkAddRawData[rawData: NumConst[value: 1]]NeuralNetworkAddTrainingsData[classNumber: NumConst[value: 0]]
Var [error] := NeuralNetworkTrain[]

if Binary [NEQ, Var [error], NumConst[value: 0]]
,then
AktionStmt [SerialWriteAction[value: StringConst[value: Error in train]]]
AktionStmt [SerialWriteAction[value: Var [error]]]
Var [success] := BoolConst[value: false]

,elseNeuralNetworkInitRawData []NeuralNetworkAddClassifyData[classNumber: NumConst[value: 0]]NeuralNetworkAddClassifyData[classNumber: NumConst[value: 0]]
Var [error] := NeuralNetworkClassify[probabilities: Var [outputs]]
MethodStmt [MethodCall [checkClassification, Var [expectSmall], BoolConst[value: true], VOID]]NeuralNetworkInitRawData []NeuralNetworkAddClassifyData[classNumber: NumConst[value: 0]]NeuralNetworkAddClassifyData[classNumber: NumConst[value: 1]]
Var [error] := NeuralNetworkClassify[probabilities: Var [outputs]]
MethodStmt [MethodCall [checkClassification, Var [expectSmall], BoolConst[value: false], VOID]]NeuralNetworkInitRawData []NeuralNetworkAddClassifyData[classNumber: NumConst[value: 1]]NeuralNetworkAddClassifyData[classNumber: NumConst[value: 0]]
Var [error] := NeuralNetworkClassify[probabilities: Var [outputs]]
MethodStmt [MethodCall [checkClassification, Var [expectSmall], BoolConst[value: false], VOID]]NeuralNetworkInitRawData []NeuralNetworkAddClassifyData[classNumber: NumConst[value: 1]]NeuralNetworkAddClassifyData[classNumber: NumConst[value: 1]]
Var [error] := NeuralNetworkClassify[probabilities: Var [outputs]]
MethodStmt [MethodCall [checkClassification, Var [expectSmall], BoolConst[value: true], VOID]]
if Var [success]
,then
AktionStmt [SerialWriteAction[value: StringConst[value: SUCCESS]]]
,else
AktionStmt [SerialWriteAction[value: StringConst[value: AT LEAST ONE ERROR]]]
WaitTimeStmt[time: NumConst[value: 10000]]

)
